#!/usr/bin/ruby

class Invert
	def initialize(matcher)
		@matcher = matcher
	end

	def ===(toCompare)
		! (@matcher === toCompare)
	end
end

class Any
	def initialize(matchers)
		@matchers = matchers
	end
	def ===(toCompare)
		@matchers.any?{|m| m === toCompare }
	end
end

class All
	def initialize(matchers)
		@matchers = matchers
	end
	def ===(toCompare)
		@matchers.all?{|m| m === toCompare }
	end
end

Tabness = 8
Flatten = ARGV.delete('-f')
ToMatch = ARGV.delete('-v') ? [Invert.new(Regexp.new(ARGV.shift))] : [Regexp.new(ARGV.shift)]

p ToMatch
exit

def decide_indentation(l)
	/^(?<stuff>\s*)/ =~ l
	chars = stuff.chars.group_by(&:itself)
	Tabness * (chars["\t"] || []).size + (chars[" "] || []).size
end

$context = {}
ARGF.each_line do |l|
	next if /\A\s*\Z/ === l
	indentation = decide_indentation(l)

	$context.delete_if {|ind,_| ind > indentation }
	$context[indentation] = l

	next unless ToMatch === l

	if Flatten
		puts $context.sort.map{|ind, l| l.strip }.join(' ')
	else
		$context.sort.each do |ind, l|
			puts l
		end
		$context.delete_if {|ind,_| ind <= indentation }  # printed all this now, don't print it again
	end
end
